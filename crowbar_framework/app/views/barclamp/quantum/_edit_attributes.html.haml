%input#proposal_attributes{:type => "hidden", :name => "proposal_attributes", :value => @proposal.raw_data['attributes'][@proposal.barclamp].to_json}
%p
  %label{:for => "proposal_attributes"}= t('.attributes')
  = link_to "Raw", proposal_barclamp_path(:id => @proposal.name, :controller => @proposal.barclamp, :dep_raw => @dep_raw, :attr_raw => true), :style => "float: right;"
  %div.container
    %p
      %label{ :for => :database_instance }= t('.database_instance')
      = instance_selector("database", :database_instance, "database_instance", @proposal)
    %p
      %label{ :for => :keystone_instance }= t('.keystone_instance')
      = instance_selector("keystone", :keystone_instance, "keystone_instance", @proposal)
    %p
      %label{ :for => :rabbitmq_instance }= t('.rabbitmq_instance')
      = instance_selector("rabbitmq", :rabbitmq_instance, "rabbitmq_instance", @proposal)
    %p
      %label{ :for => :networking_plugin }= t('.networking_plugin')
      = select_tag :networking_plugin, options_for_select([['linuxbridge', 'linuxbridge'], ['openvswitch','openvswitch']], @proposal.raw_data['attributes'][@proposal.barclamp]['networking_plugin']), :onchange => "update_value('networking_plugin', 'networking_plugin', 'string'); onPluginChange();"
    %div{ :id => 'networking_mode_div' }
      %p
        %label{ :for => :networking_mode }= t('.networking_mode')
        = select_tag :networking_mode, options_for_select([['flat', 'local'], ['gre','gre']], @proposal.raw_data['attributes'][@proposal.barclamp]["networking_mode"]), :onchange => "update_value('networking_mode', 'networking_mode', 'string')"
    %p
      %label{ :for => :service_user }= t('.service_user')
      %input#service_user{:type => "text", :name => "service_user", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["service_user"], :onchange => "update_value('service_user','service_user', 'string')"}
    %p
      %label{ :for => :service_password }= t('.service_password')
      %input#service_password{:type => "text", :name => "service_password", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["service_password"], :onchange => "update_value('service_password','service_password', 'string')"}
    = render 'barclamp/git/pfsdeps.html.haml'

:javascript
  function setSelectedValue(selectObj, valueToSet) {
    for (var i = 0; i < selectObj.options.length; i++) {
      if (selectObj.options[i].text == valueToSet) {
        selectObj.options[i].selected = true;
        return;
      }
    }
  }

  function update_value_raw_string(path, new_value) {
    var input = document.getElementById('proposal_attributes');
    var json = JSON.parse(input.value);

    var path_parts = path.split('/');
    var data = json;
    while (path_parts.length > 1) {
      var path_part = path_parts.shift();
      if (!(path_part in data))
        data[path_part] = {};
      data = data[path_part];
    }
    data[path_parts.shift()] = new_value;

    input.value = JSON.stringify(json);
  }

  function onPluginChange() {
    networkingPlugin = $('select#networking_plugin').val();
    if(networkingPlugin == "linuxbridge") {
      $('div#networking_mode_div').hide();
      update_value_raw_string('networking_mode', 'vlan');
    } else if (networkingPlugin == "openvswitch") {
      $('div#networking_mode_div').show();
      update_value('networking_mode', 'networking_mode', 'string');
    }
  }

  $(document).ready(function(){
    onPluginChange();
  });
