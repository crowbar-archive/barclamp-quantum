[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = <%= @verbose ? "True" : "False" %>

# Show debugging output in logs (sets DEBUG log level output)
debug = <%= @debug ? "True" : "False" %>

root_helper=sudo <%=@rootwrap_bin%> /etc/quantum/rootwrap.conf

# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
log_dir = /var/log/quantum

bind_host = <%= @service_host %>

bind_port = <%= @service_port %>


# ================= Syslog Options ============================
# Send logs to syslog (/dev/log) instead of to file specified
# by `log-file`
use_syslog = <%= @use_syslog ? "True" : "False" %>

# Facility to use. If unset defaults to LOG_USER.
# syslog_log_facility = LOG_LOCAL0


<% if @rabbit_settings -%>
rabbit_host=<%= @rabbit_settings[:address] %>
<% unless @rabbit_settings[:port].nil? -%>
rabbit_port=<%= @rabbit_settings[:port] %>
<% end -%>
rabbit_userid=<%= @rabbit_settings[:user] %>
rabbit_password=<%= @rabbit_settings[:password] %>
rabbit_virtual_host=<%= @rabbit_settings[:vhost] %>
<% end -%>

#core_plugin = quantum.plugins.linuxbridge.lb_quantum_plugin.LinuxBridgePluginV2
core_plugin = quantum.plugins.openvswitch.ovs_quantum_plugin.OVSQuantumPluginV2


#================dhcp agent====================
state_path = /var/lib/quantum/

dhcp_agent_notification = True
notification_driver = quantum.openstack.common.notifier.rpc_notifier

# LinuxBridge
#interface_driver = quantum.agent.linux.interface.BridgeInterfaceDriver
# Ryu
#interface_driver = quantum.agent.linux.interface.RyuInterfaceDriver

# The agent can use other DHCP drivers.  Dnsmasq is the simplest and requires
# no additional setup of the DHCP server.
dhcp_driver = quantum.agent.linux.dhcp.Dnsmasq

# Allow overlapping IP (Must have kernel build with CONFIG_NET_NS=y and
# iproute2 package that supports namespaces).
# use_namespaces = True

# Use "sudo quantum-rootwrap /etc/quantum/rootwrap.conf" to use the real
# root filter facility.
# Change to "sudo" to skip the filtering and just run the comand directly

network_scheduler_driver = quantum.scheduler.dhcp_agent_scheduler.ChanceScheduler
network_auto_schedule = True

<% if @quantum_server -%>
#=======================================l3 agent======================
auth_url = http://<%= @keystone_ip_address %>:<%= @keystone_admin_port %>/v2.0
auth_region = RegionOne
admin_tenant_name = <%= @keystone_service_tenant %>
admin_user = <%= @keystone_service_user %>
admin_password = <%= @keystone_service_password %>
interface_driver = quantum.agent.linux.interface.OVSInterfaceDriver
external_network_bridge = br-public
router_scheduler_driver = quantum.scheduler.l3_agent_scheduler.ChanceScheduler
router_auto_schedule = True
metadata_ip = <%= @metadata_address %>
metadata_port = <%= @metadata_port %>
<% end -%>
################# sql section will be used for OVS plugin config
[DATABASE]
## SQLAlchemy connection string for the reference implementation registry
## server. Any valid SQLAlchemy connection string is fine.
## See: http://bit.ly/ideIpI
sql_connection = <%= @sql_connection %>
## Period in seconds after which SQLAlchemy should reestablish its connection
## to the database.
idle_timeout = <%= @sql_idle_timeout %>
min_pool_size = <%= @sql_min_pool_size %>
max_pool_size = <%= @sql_max_pool_size %>
pool_timeout = <%= @sql_pool_timeout %>
###############

# Path to the extensions.  Note that this can be a colon-separated list of
# paths.  For example:
# api_extensions_path = extensions:/path/to/more/extensions:/even/more/extensions
# The __path__ of quantum.extensions is appended to this, so if your
# extensions are in there you don't need to specify them here
api_extensions_path =

[composite:quantum]
use = egg:Paste#urlmap
/: quantumversions
/v1.0: quantumapi_v1_0
/v1.1: quantumapi_v1_1

[pipeline:quantumapi_v1_0]
# By default, authentication is disabled.
# To enable Keystone integration uncomment the 
# following line and comment the next one
pipeline = extensions quantumapiapp_v1_0
#pipeline = authN extensions quantumapiapp_v1_0

[pipeline:quantumapi_v1_1]
# By default, authentication is disabled.
# To enable Keystone integration uncomment the 
# following line and comment the next one
pipeline = extensions quantumapiapp_v1_1
#pipeline = authN extensions quantumapiapp_v1_1

[filter:authN]
paste.filter_factory = keystone.middleware.quantum_auth_token:filter_factory
auth_host = 127.0.0.1
auth_port = 35357
auth_protocol = http
auth_version = 2.0
auth_admin_user = admin
auth_admin_password = secrete
#auth_admin_token = <token-value>

[filter:extensions]
paste.filter_factory = quantum.common.extensions:plugin_aware_extension_middleware_factory

[app:quantumversions]
paste.app_factory = quantum.api.versions:Versions.factory

[app:quantumapiapp_v1_0]
paste.app_factory = quantum.api:APIRouterV10.factory

[app:quantumapiapp_v1_1]
paste.app_factory = quantum.api:APIRouterV11.factory

[AGENT]
root_helper=sudo <%=@rootwrap_bin%> /etc/quantum/rootwrap.conf
polling_interval = 2

[SECURITYGROUP]
firewall_driver = quantum.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
